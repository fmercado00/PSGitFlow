//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImssAnalysis.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ESEEntities : DbContext
    {
        public ESEEntities()
            : base("name=ESEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administradores> Administradores { get; set; }
        public virtual DbSet<CartaIndividual> CartaIndividual { get; set; }
        public virtual DbSet<Contactos> Contactos { get; set; }
        public virtual DbSet<Empresas> Empresas { get; set; }
        public virtual DbSet<EmpresasFacturar> EmpresasFacturar { get; set; }
        public virtual DbSet<Estatus> Estatus { get; set; }
        public virtual DbSet<Imss> Imss { get; set; }
        public virtual DbSet<Parametros> Parametros { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<ReferenciasLaborales> ReferenciasLaborales { get; set; }
        public virtual DbSet<ReferenciasLaboralesD> ReferenciasLaboralesD { get; set; }
        public virtual DbSet<RegistrosPatronales> RegistrosPatronales { get; set; }
        public virtual DbSet<Solicitudes> Solicitudes { get; set; }
        public virtual DbSet<SolicitudesArchivos> SolicitudesArchivos { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<ProductosEmpresas> ProductosEmpresas { get; set; }
        public virtual DbSet<vContactos> vContactos { get; set; }
        public virtual DbSet<vEmpresas> vEmpresas { get; set; }
        public virtual DbSet<vEmpresasFacturar> vEmpresasFacturar { get; set; }
        public virtual DbSet<vProductos> vProductos { get; set; }
        public virtual DbSet<vProductosEmpresas> vProductosEmpresas { get; set; }
        public virtual DbSet<vReferenciasLaborales> vReferenciasLaborales { get; set; }
        public virtual DbSet<vReferenciasLaboralesD> vReferenciasLaboralesD { get; set; }
        public virtual DbSet<vRegistrosPatronales> vRegistrosPatronales { get; set; }
        public virtual DbSet<vSolicitudes> vSolicitudes { get; set; }
        public virtual DbSet<vUsuarios> vUsuarios { get; set; }
        public virtual DbSet<vCartaIndividual> vCartaIndividual { get; set; }
    
        public virtual int pActualizaAdministradores(Nullable<int> idUsuario, Nullable<int> idEmpresa, Nullable<decimal> nivel)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var nivelParameter = nivel.HasValue ?
                new ObjectParameter("Nivel", nivel) :
                new ObjectParameter("Nivel", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pActualizaAdministradores", idUsuarioParameter, idEmpresaParameter, nivelParameter);
        }
    
        public virtual int pActualizaCRFile(Nullable<int> idReferenciaLaboral, Nullable<int> idReferenciaLaboralD, string cartaRecomendacion)
        {
            var idReferenciaLaboralParameter = idReferenciaLaboral.HasValue ?
                new ObjectParameter("IdReferenciaLaboral", idReferenciaLaboral) :
                new ObjectParameter("IdReferenciaLaboral", typeof(int));
    
            var idReferenciaLaboralDParameter = idReferenciaLaboralD.HasValue ?
                new ObjectParameter("IdReferenciaLaboralD", idReferenciaLaboralD) :
                new ObjectParameter("IdReferenciaLaboralD", typeof(int));
    
            var cartaRecomendacionParameter = cartaRecomendacion != null ?
                new ObjectParameter("CartaRecomendacion", cartaRecomendacion) :
                new ObjectParameter("CartaRecomendacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pActualizaCRFile", idReferenciaLaboralParameter, idReferenciaLaboralDParameter, cartaRecomendacionParameter);
        }
    
        public virtual int pActualizaImssFile(Nullable<int> idSolicitud, Nullable<int> idUsuarioRegistro, string imssFIle)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var idUsuarioRegistroParameter = idUsuarioRegistro.HasValue ?
                new ObjectParameter("IdUsuarioRegistro", idUsuarioRegistro) :
                new ObjectParameter("IdUsuarioRegistro", typeof(int));
    
            var imssFIleParameter = imssFIle != null ?
                new ObjectParameter("ImssFIle", imssFIle) :
                new ObjectParameter("ImssFIle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pActualizaImssFile", idSolicitudParameter, idUsuarioRegistroParameter, imssFIleParameter);
        }
    
        public virtual int pActualizaProductosEmpresas(Nullable<int> idProducto, Nullable<int> idEmpresa, Nullable<decimal> precio)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pActualizaProductosEmpresas", idProductoParameter, idEmpresaParameter, precioParameter);
        }
    
        public virtual int pBorraProductosEmpresas(Nullable<int> idProducto, Nullable<int> idEmpresa)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pBorraProductosEmpresas", idProductoParameter, idEmpresaParameter);
        }
    
        public virtual int pDesactivaEmpresa(Nullable<int> idEmpresa)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pDesactivaEmpresa", idEmpresaParameter);
        }
    
        public virtual int pDesactivaProductos(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pDesactivaProductos", idProductoParameter);
        }
    
        public virtual int pEliminaRegistrosPatronales(Nullable<int> idSolicitud)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pEliminaRegistrosPatronales", idSolicitudParameter);
        }
    
        public virtual int pInsertaAdministradores(Nullable<int> idUsuario, Nullable<int> nivel, Nullable<int> idEmpresa)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nivelParameter = nivel.HasValue ?
                new ObjectParameter("Nivel", nivel) :
                new ObjectParameter("Nivel", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaAdministradores", idUsuarioParameter, nivelParameter, idEmpresaParameter);
        }
    
        public virtual int pInsertaCartaIndividual(Nullable<int> idRegistroPatronal, Nullable<System.DateTime> fechaIngreso, Nullable<System.DateTime> fechaEgreso)
        {
            var idRegistroPatronalParameter = idRegistroPatronal.HasValue ?
                new ObjectParameter("IdRegistroPatronal", idRegistroPatronal) :
                new ObjectParameter("IdRegistroPatronal", typeof(int));
    
            var fechaIngresoParameter = fechaIngreso.HasValue ?
                new ObjectParameter("FechaIngreso", fechaIngreso) :
                new ObjectParameter("FechaIngreso", typeof(System.DateTime));
    
            var fechaEgresoParameter = fechaEgreso.HasValue ?
                new ObjectParameter("FechaEgreso", fechaEgreso) :
                new ObjectParameter("FechaEgreso", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaCartaIndividual", idRegistroPatronalParameter, fechaIngresoParameter, fechaEgresoParameter);
        }
    
        public virtual int pInsertaEmpresas(string razonSocial, string codigoRegistro, Nullable<int> idEstatus)
        {
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var codigoRegistroParameter = codigoRegistro != null ?
                new ObjectParameter("CodigoRegistro", codigoRegistro) :
                new ObjectParameter("CodigoRegistro", typeof(string));
    
            var idEstatusParameter = idEstatus.HasValue ?
                new ObjectParameter("IdEstatus", idEstatus) :
                new ObjectParameter("IdEstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaEmpresas", razonSocialParameter, codigoRegistroParameter, idEstatusParameter);
        }
    
        public virtual int pInsertaEmpresasFacturar(string nombre, string rFC, string usoCFDI, string metodoPago, Nullable<int> idEmpresa)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usoCFDIParameter = usoCFDI != null ?
                new ObjectParameter("UsoCFDI", usoCFDI) :
                new ObjectParameter("UsoCFDI", typeof(string));
    
            var metodoPagoParameter = metodoPago != null ?
                new ObjectParameter("MetodoPago", metodoPago) :
                new ObjectParameter("MetodoPago", typeof(string));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaEmpresasFacturar", nombreParameter, rFCParameter, usoCFDIParameter, metodoPagoParameter, idEmpresaParameter);
        }
    
        public virtual int pInsertaProductos(string nombre, string descripcion, Nullable<int> idEstatus)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idEstatusParameter = idEstatus.HasValue ?
                new ObjectParameter("IdEstatus", idEstatus) :
                new ObjectParameter("IdEstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaProductos", nombreParameter, descripcionParameter, idEstatusParameter);
        }
    
        public virtual int pInsertaProductosEmpresas(Nullable<int> idProducto, Nullable<int> idEmpresa, Nullable<decimal> precio)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaProductosEmpresas", idProductoParameter, idEmpresaParameter, precioParameter);
        }
    
        public virtual int pInsertaReferenciasLaborales(string estadoCivil, Nullable<System.DateTime> fechaAnteriorIngreso, string familiaenEmpresa, string observaciones, Nullable<int> idSolicitud, Nullable<System.DateTime> fechaAnteriorEgreso, string trabajoAntesEmpresa)
        {
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("EstadoCivil", estadoCivil) :
                new ObjectParameter("EstadoCivil", typeof(string));
    
            var fechaAnteriorIngresoParameter = fechaAnteriorIngreso.HasValue ?
                new ObjectParameter("FechaAnteriorIngreso", fechaAnteriorIngreso) :
                new ObjectParameter("FechaAnteriorIngreso", typeof(System.DateTime));
    
            var familiaenEmpresaParameter = familiaenEmpresa != null ?
                new ObjectParameter("FamiliaenEmpresa", familiaenEmpresa) :
                new ObjectParameter("FamiliaenEmpresa", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var fechaAnteriorEgresoParameter = fechaAnteriorEgreso.HasValue ?
                new ObjectParameter("FechaAnteriorEgreso", fechaAnteriorEgreso) :
                new ObjectParameter("FechaAnteriorEgreso", typeof(System.DateTime));
    
            var trabajoAntesEmpresaParameter = trabajoAntesEmpresa != null ?
                new ObjectParameter("TrabajoAntesEmpresa", trabajoAntesEmpresa) :
                new ObjectParameter("TrabajoAntesEmpresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaReferenciasLaborales", estadoCivilParameter, fechaAnteriorIngresoParameter, familiaenEmpresaParameter, observacionesParameter, idSolicitudParameter, fechaAnteriorEgresoParameter, trabajoAntesEmpresaParameter);
        }
    
        public virtual int pInsertaReferenciasLaboralesD(Nullable<int> idReferenciaLaboral, string nombreEmpresa, string sucursal, string outsourcing, string marcaAsignada, string giroEmpresa, string domicilioLaboral, string puestoDesempeñado, Nullable<System.DateTime> fechaIngreso, Nullable<System.DateTime> fechaEgreso, string motivoSalida, string cartaRecomendacion, string jefeInmediato, string telefonos, string observaciones)
        {
            var idReferenciaLaboralParameter = idReferenciaLaboral.HasValue ?
                new ObjectParameter("IdReferenciaLaboral", idReferenciaLaboral) :
                new ObjectParameter("IdReferenciaLaboral", typeof(int));
    
            var nombreEmpresaParameter = nombreEmpresa != null ?
                new ObjectParameter("NombreEmpresa", nombreEmpresa) :
                new ObjectParameter("NombreEmpresa", typeof(string));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var outsourcingParameter = outsourcing != null ?
                new ObjectParameter("Outsourcing", outsourcing) :
                new ObjectParameter("Outsourcing", typeof(string));
    
            var marcaAsignadaParameter = marcaAsignada != null ?
                new ObjectParameter("MarcaAsignada", marcaAsignada) :
                new ObjectParameter("MarcaAsignada", typeof(string));
    
            var giroEmpresaParameter = giroEmpresa != null ?
                new ObjectParameter("GiroEmpresa", giroEmpresa) :
                new ObjectParameter("GiroEmpresa", typeof(string));
    
            var domicilioLaboralParameter = domicilioLaboral != null ?
                new ObjectParameter("DomicilioLaboral", domicilioLaboral) :
                new ObjectParameter("DomicilioLaboral", typeof(string));
    
            var puestoDesempeñadoParameter = puestoDesempeñado != null ?
                new ObjectParameter("PuestoDesempeñado", puestoDesempeñado) :
                new ObjectParameter("PuestoDesempeñado", typeof(string));
    
            var fechaIngresoParameter = fechaIngreso.HasValue ?
                new ObjectParameter("FechaIngreso", fechaIngreso) :
                new ObjectParameter("FechaIngreso", typeof(System.DateTime));
    
            var fechaEgresoParameter = fechaEgreso.HasValue ?
                new ObjectParameter("FechaEgreso", fechaEgreso) :
                new ObjectParameter("FechaEgreso", typeof(System.DateTime));
    
            var motivoSalidaParameter = motivoSalida != null ?
                new ObjectParameter("MotivoSalida", motivoSalida) :
                new ObjectParameter("MotivoSalida", typeof(string));
    
            var cartaRecomendacionParameter = cartaRecomendacion != null ?
                new ObjectParameter("CartaRecomendacion", cartaRecomendacion) :
                new ObjectParameter("CartaRecomendacion", typeof(string));
    
            var jefeInmediatoParameter = jefeInmediato != null ?
                new ObjectParameter("JefeInmediato", jefeInmediato) :
                new ObjectParameter("JefeInmediato", typeof(string));
    
            var telefonosParameter = telefonos != null ?
                new ObjectParameter("Telefonos", telefonos) :
                new ObjectParameter("Telefonos", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaReferenciasLaboralesD", idReferenciaLaboralParameter, nombreEmpresaParameter, sucursalParameter, outsourcingParameter, marcaAsignadaParameter, giroEmpresaParameter, domicilioLaboralParameter, puestoDesempeñadoParameter, fechaIngresoParameter, fechaEgresoParameter, motivoSalidaParameter, cartaRecomendacionParameter, jefeInmediatoParameter, telefonosParameter, observacionesParameter);
        }
    
        public virtual int pInsertaRegistrosPatronales(Nullable<int> idSolicitud, string registroPatronal, string nombreCompania)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var nombreCompaniaParameter = nombreCompania != null ?
                new ObjectParameter("NombreCompania", nombreCompania) :
                new ObjectParameter("NombreCompania", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaRegistrosPatronales", idSolicitudParameter, registroPatronalParameter, nombreCompaniaParameter);
        }
    
        public virtual int pInsertaSolicitudes(Nullable<int> idEmpresa, string nombres, string apellidoPatermo, string apellidoMaterno, string puesto, Nullable<System.DateTime> fechaNacimiento, string lugarNacimiento, string cURP, string iMSS, string telefonoCelular, string telefonoCasa, string telefonoRecados, string calle, string numExterior, string numInterior, string colonia, string codigoPostal, string alcaldiaMunicipio, string ciudad, Nullable<int> idEmpresaFacturar, Nullable<int> idProducto, string uploadFileName, Nullable<System.DateTime> fechaCaptura, Nullable<System.DateTime> fechaAtencion, Nullable<int> idUsuarioRegistro, Nullable<System.DateTime> fechaRegistro, Nullable<int> idEstatus, string imssFile, string emailContacto, string observaciones)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidoPatermoParameter = apellidoPatermo != null ?
                new ObjectParameter("ApellidoPatermo", apellidoPatermo) :
                new ObjectParameter("ApellidoPatermo", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("LugarNacimiento", lugarNacimiento) :
                new ObjectParameter("LugarNacimiento", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var iMSSParameter = iMSS != null ?
                new ObjectParameter("IMSS", iMSS) :
                new ObjectParameter("IMSS", typeof(string));
    
            var telefonoCelularParameter = telefonoCelular != null ?
                new ObjectParameter("TelefonoCelular", telefonoCelular) :
                new ObjectParameter("TelefonoCelular", typeof(string));
    
            var telefonoCasaParameter = telefonoCasa != null ?
                new ObjectParameter("TelefonoCasa", telefonoCasa) :
                new ObjectParameter("TelefonoCasa", typeof(string));
    
            var telefonoRecadosParameter = telefonoRecados != null ?
                new ObjectParameter("TelefonoRecados", telefonoRecados) :
                new ObjectParameter("TelefonoRecados", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var numExteriorParameter = numExterior != null ?
                new ObjectParameter("NumExterior", numExterior) :
                new ObjectParameter("NumExterior", typeof(string));
    
            var numInteriorParameter = numInterior != null ?
                new ObjectParameter("NumInterior", numInterior) :
                new ObjectParameter("NumInterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var alcaldiaMunicipioParameter = alcaldiaMunicipio != null ?
                new ObjectParameter("AlcaldiaMunicipio", alcaldiaMunicipio) :
                new ObjectParameter("AlcaldiaMunicipio", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var idEmpresaFacturarParameter = idEmpresaFacturar.HasValue ?
                new ObjectParameter("IdEmpresaFacturar", idEmpresaFacturar) :
                new ObjectParameter("IdEmpresaFacturar", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var uploadFileNameParameter = uploadFileName != null ?
                new ObjectParameter("UploadFileName", uploadFileName) :
                new ObjectParameter("UploadFileName", typeof(string));
    
            var fechaCapturaParameter = fechaCaptura.HasValue ?
                new ObjectParameter("FechaCaptura", fechaCaptura) :
                new ObjectParameter("FechaCaptura", typeof(System.DateTime));
    
            var fechaAtencionParameter = fechaAtencion.HasValue ?
                new ObjectParameter("FechaAtencion", fechaAtencion) :
                new ObjectParameter("FechaAtencion", typeof(System.DateTime));
    
            var idUsuarioRegistroParameter = idUsuarioRegistro.HasValue ?
                new ObjectParameter("IdUsuarioRegistro", idUsuarioRegistro) :
                new ObjectParameter("IdUsuarioRegistro", typeof(int));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var idEstatusParameter = idEstatus.HasValue ?
                new ObjectParameter("IdEstatus", idEstatus) :
                new ObjectParameter("IdEstatus", typeof(int));
    
            var imssFileParameter = imssFile != null ?
                new ObjectParameter("ImssFile", imssFile) :
                new ObjectParameter("ImssFile", typeof(string));
    
            var emailContactoParameter = emailContacto != null ?
                new ObjectParameter("emailContacto", emailContacto) :
                new ObjectParameter("emailContacto", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaSolicitudes", idEmpresaParameter, nombresParameter, apellidoPatermoParameter, apellidoMaternoParameter, puestoParameter, fechaNacimientoParameter, lugarNacimientoParameter, cURPParameter, iMSSParameter, telefonoCelularParameter, telefonoCasaParameter, telefonoRecadosParameter, calleParameter, numExteriorParameter, numInteriorParameter, coloniaParameter, codigoPostalParameter, alcaldiaMunicipioParameter, ciudadParameter, idEmpresaFacturarParameter, idProductoParameter, uploadFileNameParameter, fechaCapturaParameter, fechaAtencionParameter, idUsuarioRegistroParameter, fechaRegistroParameter, idEstatusParameter, imssFileParameter, emailContactoParameter, observacionesParameter);
        }
    
        public virtual int pInsertaSolicitudesArchivos(Nullable<int> idSolicitud, string avisoPrivacidad, string iNE)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var avisoPrivacidadParameter = avisoPrivacidad != null ?
                new ObjectParameter("AvisoPrivacidad", avisoPrivacidad) :
                new ObjectParameter("AvisoPrivacidad", typeof(string));
    
            var iNEParameter = iNE != null ?
                new ObjectParameter("INE", iNE) :
                new ObjectParameter("INE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaSolicitudesArchivos", idSolicitudParameter, avisoPrivacidadParameter, iNEParameter);
        }
    
        public virtual int pInsertaUsuarios(string nombre, Nullable<int> idEmpresa, string contrasena, string email, Nullable<int> idEstatus)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var idEstatusParameter = idEstatus.HasValue ?
                new ObjectParameter("IdEstatus", idEstatus) :
                new ObjectParameter("IdEstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pInsertaUsuarios", nombreParameter, idEmpresaParameter, contrasenaParameter, emailParameter, idEstatusParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
